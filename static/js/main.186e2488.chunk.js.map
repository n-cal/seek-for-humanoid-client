{"version":3,"sources":["components/SearchController/SearchController.js","components/CountryInfo/countries-map.js","components/CountryInfo/CountryInfo.js","components/HumanoidItem/HumanoidItem.js","components/HumanoidsList/HumanoidsList.js","components/PageSelector/PageSelector.js","components/Loader/Loader.js","pages/HomePage/HomePage.js","pages/DetailPage/DetailPage.js","App.js","reportWebVitals.js","index.js"],"names":["SearchController","makeQuery","setSearchName","setSelectedCountry","countries","className","onChange","e","target","value","placeholder","map","country","onClick","countriesMap","CountryInfo","countryName","countryCode","src","srcSet","width","alt","HumanoidItem","humanoid","to","id","thumbnail_url","name","surname","HumanoidsList","humanoids","PageSelector","currentPage","resultsCount","setCurrentPage","selectedStyle","pagesCount","Math","floor","centralPages","Array","keys","slice","n","length","Loader","props","serverAppUrl","HomePage","useState","count","results","humanoidsResult","setHumanoidsResult","setCountries","selectedCountry","searchName","queryParams","setQueryParams","loading","setLoading","error","setError","useEffect","fetchData","a","retrieveHumanoids","retrieveCountries","humanoidsUrl","fetch","humanoidsResponse","status","Error","json","countriesResponse","includes","content","params","URLSearchParams","append","searchValue","split","filter","ch","join","has","toString","DetailPage","useParams","setHumanoid","retrieveHumanoidDetails","humanoidDetailsUrl","humanoidDetailsResponse","bio","img_url","email","address","city","zip_code","mobile","phone","App","exact","path","component","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.186e2488.chunk.js","sourcesContent":["function SearchController({ makeQuery, setSearchName, setSelectedCountry, countries}) {\n    return (\n        <div className=\"max-w-full flex flex-col bg-white rounded-lg shadow p-3 mb-5 sm:mx-5\">\n            <input \n                onChange={e => setSearchName(e.target.value)}\n                className=\"p-1 bg-gray-100 border border-gray-300 rounded\" \n                placeholder=\"name\" />\n            \n            <div className=\"w-full mt-2\">\n                <select\n                    onChange={e => setSelectedCountry(e.target.value)} \n                    className=\"w-full p-1 bg-gray-200 rounded shadow-2xl\">\n                    <option value=\"\">all countries</option>\n                    { countries.map(country => <option key={country} value={country}>{country}</option>) }\n                </select>\n            </div>\n\n            <button \n                onClick={makeQuery} \n                className=\"mt-4 p-2 rounded bg-green-200 shadow font-mono\"\n            > \n                search {'->'}\n            </button>\n        </div>\n    );\n}\n\nexport default SearchController;","const countriesMap = {\n    \"Alaska\": \"us-ak\",\n    \"Alabama\": \"us-al\",\n    \"Arkansas\": \"us-ar\",\n    \"Arizona\": \"us-az\",\n    \"California\": \"us-ca\",\n    \"Colorado\": \"us-co\",\n    \"Connecticut\": \"us-ct\",\n    \"Delaware\": \"us-de\",\n    \"Florida\": \"us-fl\",\n    \"Georgia\": \"us-ga\",\n    \"Hawaii\": \"us-hi\",\n    \"Iowa\": \"us-ia\",\n    \"Idaho\": \"us-id\",\n    \"Illinois\": \"us-il\",\n    \"Indiana\": \"us-in\",\n    \"Kansas\": \"us-ks\",\n    \"Kentucky\": \"us-ky\",\n    \"Louisiana\": \"us-la\",\n    \"Massachusetts\": \"us-ma\",\n    \"Maryland\": \"us-md\",\n    \"Maine\": \"us-me\",\n    \"Michigan\": \"us-mi\",\n    \"Minnesota\": \"us-mn\",\n    \"Missouri\": \"us-mo\",\n    \"Mississippi\": \"us-ms\",\n    \"Montana\": \"us-mt\",\n    \"North Carolina\": \"us-nc\",\n    \"North Dakota\": \"us-nd\",\n    \"Nebraska\": \"us-ne\",\n    \"New Hampshire\": \"us-nh\",\n    \"New Jersey\": \"us-nj\",\n    \"New Mexico\": \"us-nm\",\n    \"Nevada\": \"us-nv\",\n    \"New York\": \"us-ny\",\n    \"Ohio\": \"us-oh\",\n    \"Oklahoma\": \"us-ok\",\n    \"Oregon\": \"us-or\",\n    \"Pennsylvania\": \"us-pa\",\n    \"Rhode Island\": \"us-ri\",\n    \"South Carolina\": \"us-sc\",\n    \"South Dakota\": \"us-sd\",\n    \"Tennessee\": \"us-tn\",\n    \"Texas\": \"us-tx\",\n    \"Utah\": \"us-ut\",\n    \"Virginia\": \"us-va\",\n    \"Vermont\": \"us-vt\",\n    \"Washington\": \"us-wa\",\n    \"Wisconsin\": \"us-wi\",\n    \"West Virginia\": \"us-wv\",\n    \"Wyoming\": \"us-wy\"\n}\n\nexport default countriesMap;","import countriesMap from \"./countries-map\";\n\nfunction CountryInfo({ countryName }) {\n  const countryCode = countriesMap[countryName];\n  return (\n    <div className=\"flex flex-col items-start border-gray-700 pt-4 mr-4\">\n      <img\n        className=\"rounded border border-black\"\n        src={`https://flagcdn.com/w40/${countryCode}.png`}\n        srcSet={`https://flagcdn.com/w80/${countryCode}.png 2x`}\n        width=\"40\"\n        alt={countryName}\n      />\n      <span className=\"block mt-1 text-xs text-gray-500\">{countryName}</span>\n    </div>\n  );\n}\n\nexport default CountryInfo;\n","import { Link } from \"react-router-dom\";\nimport CountryInfo from \"../CountryInfo/CountryInfo\";\n\nfunction HumanoidItem({ humanoid }) {\n  return (\n    <Link to={`/detail/${humanoid.id}`}>\n      <div className=\"cursor-pointer bg-white shadow rounded flex items-center pl-4 py-3 mb-2 overflow-hidden sm:flex-row-reverse sm:justify-between sm:pr-4 sm:mr-5\">\n        <img\n          className=\"rounded-full\"\n          src={humanoid.thumbnail_url}\n          alt={humanoid.name}\n        />\n\n        <div className=\"flex flex-col justify-between items-start p-2 sm:flex-row-reverse sm:flex-grow sm:max-w-xs sm:items-center\">\n          <p className=\"block text-xl\">\n            {humanoid.name} {humanoid.surname}\n          </p>\n          <CountryInfo countryName={humanoid.country} />\n        </div>\n      </div>\n    </Link>\n  );\n}\n\nexport default HumanoidItem;\n","import HumanoidItem from \"../HumanoidItem/HumanoidItem\";\n\nfunction HumanoidsList({ humanoids }) {\n  return (\n    <div className=\"flex-col items-stretch flex-grow max-w-xl\">\n      {humanoids.map((humanoid) => (\n        <HumanoidItem key={humanoid.id} humanoid={humanoid} />\n      ))}\n    </div>\n  );\n}\n\nexport default HumanoidsList;\n","const resultsPerPage = 4;\n\nfunction PageSelector({ currentPage, resultsCount, setCurrentPage }) {\n  const selectedStyle = \"text-gray-700 underline\";\n  const pagesCount =\n    Math.floor(resultsCount / resultsPerPage) +\n    (resultsCount % resultsPerPage > 0 ? 1 : 0);\n\n  let centralPages = [];\n\n  if (pagesCount < 5) {\n    centralPages = [...Array(pagesCount).keys()].slice(2);\n  } else if (currentPage === 1 || currentPage === 2) {\n    centralPages = [2, 3];\n  } else if (currentPage === pagesCount || currentPage === pagesCount - 1) {\n    centralPages = [pagesCount - 2, pagesCount - 1];\n  } else {\n    centralPages = [currentPage - 1, currentPage, currentPage + 1];\n  }\n\n  return (\n    <div className=\"mt-5 text-gray-400\">\n      <p className=\"text-center font-mono\">\n        {currentPage > 1 && (\n          <span\n            className=\"cursor-pointer p-1\"\n            onClick={() => setCurrentPage(currentPage - 1)}\n          >\n            {\"<-\"}\n          </span>\n        )}\n\n        <span\n          className={`p-1 cursor-pointer ${\n            currentPage === 1 ? selectedStyle : \"\"\n          }`}\n          onClick={() => setCurrentPage(1)}\n        >\n          1\n        </span>\n        {centralPages[0] - 1 > 1 && <span className=\"p-1\">..</span>}\n        {centralPages.map((n) => (\n          <span\n            key={n}\n            className={`p-1 cursor-pointer ${\n              n === currentPage ? selectedStyle : \"\"\n            }`}\n            onClick={() => setCurrentPage(n)}\n          >\n            {n}\n          </span>\n        ))}\n        {pagesCount - centralPages[centralPages.length - 1] > 1 && (\n          <span className=\"p-1\">..</span>\n        )}\n        {pagesCount > 1 && (\n          <span\n            className={`p-1 cursor-pointer ${\n              currentPage === pagesCount ? selectedStyle : \"\"\n            }`}\n            onClick={() => setCurrentPage(pagesCount)}\n          >\n            {pagesCount}\n          </span>\n        )}\n        {currentPage < pagesCount && (\n          <span\n            className=\"cursor-pointer p-1\"\n            onClick={() => setCurrentPage(currentPage + 1)}\n          >\n            {\"->\"}\n          </span>\n        )}\n      </p>\n    </div>\n  );\n}\n\nexport default PageSelector;\n","import React from \"react\";\n\nfunction Loader(props) {\n  return (\n    <div className=\"flex justify-center\">\n      <div className=\"loader\"></div>\n    </div>\n  );\n}\n\nexport default Loader;\n","import { useEffect, useState } from \"react\";\nimport SearchController from \"../../components/SearchController/SearchController\";\nimport HumanoidsList from \"../../components/HumanoidsList/HumanoidsList\";\nimport PageSelector from \"../../components/PageSelector/PageSelector\";\nimport Loader from \"../../components/Loader/Loader\";\n\nconst serverAppUrl = \"https://boiling-journey-35582.herokuapp.com\";\n\nfunction HomePage(props) {\n  const [humanoidsResult, setHumanoidsResult] = useState({\n    count: 0,\n    results: [],\n  });\n  const [currentPage, setCurrentPage] = useState(1);\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry, setSelectedCountry] = useState(\"\");\n  const [searchName, setSearchName] = useState(\"\");\n  const [queryParams, setQueryParams] = useState(\"\");\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => {\n    const fetchData = async () => {\n      setLoading(true);\n      try {\n        await retrieveHumanoids();\n        await retrieveCountries();\n        setError(false);\n      } catch (e) {\n        setError(true);\n        setHumanoidsResult({ count: 0, results: [] });\n        setCountries([]);\n      } finally {\n        setLoading(false);\n      }\n    };\n    fetchData();\n  }, [currentPage, queryParams]);\n\n  const retrieveHumanoids = async () => {\n    const humanoidsUrl =\n      serverAppUrl +\n      `/api/humanoids?pag=${currentPage}` +\n      (queryParams ? \"&\" + queryParams : \"\");\n\n    const humanoidsResponse = await fetch(humanoidsUrl);\n\n    if (humanoidsResponse.status !== 200) {\n      throw new Error(\"error retrieving humanoids\");\n    }\n\n    const json = await humanoidsResponse.json();\n    setHumanoidsResult({ count: json.count, results: json.results });\n  };\n\n  const retrieveCountries = async () => {\n    const countriesUrl = serverAppUrl + \"/api/countries\";\n\n    const countriesResponse = await fetch(countriesUrl);\n\n    if (countriesResponse.status !== 200) {\n      throw new Error(\"error retrieving countries\");\n    }\n\n    const json = await countriesResponse.json();\n    setCountries(json);\n\n    if (!json.includes(selectedCountry)) {\n      setSelectedCountry(\"\");\n    }\n  };\n\n  function makeQuery() {\n    const params = new URLSearchParams();\n\n    if (selectedCountry) {\n      params.append(\"country\", selectedCountry);\n    }\n\n    let searchValue = searchName\n      .split(\" \")\n      .filter((ch) => ch)\n      .join(\" \");\n\n    if (searchValue) {\n      params.append(\"search\", searchValue);\n    }\n\n    if (!params.has(\"country\") && !params.has(\"search\")) {\n      setCurrentPage(1);\n      setQueryParams(\"\");\n      return;\n    }\n\n    setCurrentPage(1);\n    setQueryParams(params.toString());\n  }\n\n  let content = null;\n\n  if (loading) {\n    content = <Loader />;\n  } else if (error) {\n    content = <h1 className=\"text-center text-xl\">An Error Occurred!</h1>;\n  } else if (humanoidsResult.count > 0) {\n    content = [\n      <HumanoidsList key=\"1\" humanoids={humanoidsResult.results} />,\n      <PageSelector\n        key=\"2\"\n        resultsCount={humanoidsResult.count}\n        {...{ currentPage, setCurrentPage }}\n      />,\n    ];\n  } else {\n    content = <h1 className=\"text-center text-xl\">No Humanoids Found</h1>;\n  }\n\n  return (\n    <div className=\"flex flex-col items-center p-3 text-gray-600 sm:flex-row-reverse sm:justify-center sm:items-start\">\n      <SearchController\n        {...{ makeQuery, setSearchName, setSelectedCountry, countries }}\n      />\n      <div className=\"flex-col items-stretch flex-grow max-w-xl\">{content}</div>\n    </div>\n  );\n}\n\nexport default HomePage;\n","import { useParams } from \"react-router\";\nimport { useEffect, useState } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport CountryInfo from \"../../components/CountryInfo/CountryInfo\";\nimport Loader from \"../../components/Loader/Loader\";\n\nconst serverAppUrl = \"https://boiling-journey-35582.herokuapp.com\";\n\nfunction DetailPage(props) {\n  const params = useParams();\n  const [humanoid, setHumanoid] = useState(null);\n  const [loading, setLoading] = useState(true);\n  const [error, setError] = useState(false);\n\n  useEffect(() => retrieveHumanoidDetails(), []);\n\n  const retrieveHumanoidDetails = async () => {\n    const humanoidDetailsUrl = serverAppUrl + `/api/humanoids/${params.id}`;\n\n    setLoading(true);\n    const humanoidDetailsResponse = await fetch(humanoidDetailsUrl);\n    if (humanoidDetailsResponse.status !== 200) {\n      setError(true);\n    } else {\n      const json = await humanoidDetailsResponse.json();\n      setHumanoid(json);\n    }\n    setLoading(false);\n  };\n\n  if (loading) {\n    return <Loader />;\n  }\n\n  if (error) {\n    return <h1 className=\"text-center text-xl\">An Error Occurred!</h1>;\n  }\n\n  return (\n    <div\n      className=\"\n      flex flex-col\n      text-gray-600\n      sm:flex-row sm:items-start sm:justify-center\n      p-2\n    \"\n    >\n      <div className=\"flex-col items-center mt-3 max-w-2xl sm:mr-3\">\n        <div className=\"flex items-center justify-between bg-white shadow rounded p-3\">\n          <Link to=\"/\">\n            <button className=\"text-xs bg-green-200 rounded p-1 shadow mr-3 hover:bg-green-50\">\n              {\"<-\"} back to list\n            </button>\n          </Link>\n          <h1 className=\"text-3xl m-auto\">\n            {humanoid.name} {humanoid.surname}\n          </h1>\n          <CountryInfo countryName={humanoid.country} />\n        </div>\n\n        <div className=\"bg-white rounded p-4 shadow mt-3\">\n          <h2 className=\"text-lg font-bold\">{\">\"} Humanoid Bio</h2>\n          <p>{humanoid.bio}</p>\n        </div>\n      </div>\n\n      <div className=\"flex flex-col\">\n        <div className=\"flex justify-center mt-3 sm:min-w-max\">\n          <img\n            className=\"bg-white p-3 rounded shadow\"\n            src={humanoid.img_url}\n            alt={humanoid.name}\n          />\n        </div>\n        <div className=\"bg-white rounded shadow p-3 mt-3\">\n          <h2 className=\"text-lg font-bold\">{\">\"} Details</h2>\n          <p>email - {humanoid.email}</p>\n          <p>address - {humanoid.address}</p>\n          <p>city - {humanoid.city}</p>\n          <p>zip code - {humanoid.zip_code}</p>\n          <p>mobile - {humanoid.mobile}</p>\n          <p>phone - {humanoid.phone}</p>\n        </div>\n      </div>\n    </div>\n  );\n}\n\nexport default DetailPage;\n","import {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from \"react-router-dom\";\nimport HomePage from \"./pages/HomePage/HomePage\";\nimport DetailPage from \"./pages/DetailPage/DetailPage\";\n\nfunction App() {\n  return (\n    <Router>\n      <div className=\"App\">\n        <nav className=\"bg-gray-500 text-gray-50 p-3\">\n          <p className=\"text-xl\">Seek For Humanoid</p>\n        </nav>\n\n        <Switch>\n          <Route exact path=\"/seek-for-humanoid-client\">\n            <Redirect to=\"/\" />\n          </Route>\n          <Route exact path=\"/detail/:id\" component={DetailPage} />\n          <Route exact path=\"/\" component={HomePage} />\n        </Switch>\n      </div>\n    </Router>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}